const MessageTest = artifacts.require("MessageTest.sol");

contract('ArbitraryMessage.sol', async () => {
  describe('unpackData', () => {
    it('unpack dataType 0x00', async () => {
      // given
      const sender = '0x003667154bb32e42bb9e1e6532f19d187fa0082e'
      const contractAddress = '0xf4bef13f9f4f2b203faf0c3cbbaabe1afe056955'
      const txHash = '0xbdceda9d8c94838aca10c687da1411a07b1390e88239c0638cb9cc264219cc10'
      const gasLimit = '1535604485'
      const gasPrice = '0'
      const dataType = '0x00'
      const data = '0xb1591967aed668a4b27645ff40c444892d91bf5951b382995d4d4f6ee3a2ce03'
      // event message generated by
      // requireToPassMessage(address _contract, bytes _data, uint256 _gas)
      const eventMessage = "0x003667154bb32e42bb9e1e6532f19d187fa0082e" + // sender
        "f4bef13f9f4f2b203faf0c3cbbaabe1afe056955" + // contractAddress
        "000000000000000000000000000000000000000000000000000000005b877705" + // gasLimit
        "00" + // dataType
        "b1591967aed668a4b27645ff40c444892d91bf5951b382995d4d4f6ee3a2ce03" // data

      // validator needs to add txHash into message
      const message = eventMessage.slice(0, 82) + txHash.replace(/^0x/, '') + eventMessage.slice(82)

      // when
      const messageTest = await MessageTest.new()
      const { logs } = await messageTest.unpackData(message)

      // then
      expect(logs.length).to.be.equal(1)
      const { args } = logs[0]
      expect(args.sender).to.be.equal(sender)
      expect(args.executor).to.be.equal(contractAddress)
      expect(args.gasLimit.toString()).to.be.equal(gasLimit)
      expect(args.dataType).to.be.equal(dataType)
      expect(args.gasPrice.toString()).to.be.equal(gasPrice)
      expect(args.data).to.be.equal(data)
    })

    it('unpack dataType 0x01', async () => {
      // given
      const sender = '0xc95e32f5b21aea8107aa2c645636e909489031e8'
      const contractAddress = '0xf4bef13f9f4f2b203faf0c3cbbaabe1afe056955'
      const txHash = '0x27aa676e59e4feaafcfde2b88c6002b756795c1260762512ba26ff28fdaf0f64'
      const gasLimit = '1535604485'
      const gasPrice = '6000000000'
      const dataType = '0x01'
      const data = '0xb1591967aed668a4b27645ff40c444892d91bf5951b382995d4d4f6ee3a2ce03'
      // event message generated by
      // requireToPassMessage(address _contract, bytes _data, uint256 _gas, uint256 _gasPrice)
      const eventMessage = "0xc95e32f5b21aea8107aa2c645636e909489031e8" + // sender
        "f4bef13f9f4f2b203faf0c3cbbaabe1afe056955" + // contractAddress
        "000000000000000000000000000000000000000000000000000000005b877705" + // gasLimit
        "01" + // dataType
        "0000000000000000000000000000000000000000000000000000000165a0bc00" + // gasPrice
        "b1591967aed668a4b27645ff40c444892d91bf5951b382995d4d4f6ee3a2ce03" // data

      // validator needs to add txHash into message
      const message = eventMessage.slice(0, 82) + txHash.replace(/^0x/, '') + eventMessage.slice(82)

      // when
      const messageTest = await MessageTest.new()
      const { logs } = await messageTest.unpackData(message)

      // then
      expect(logs.length).to.be.equal(1)
      const { args } = logs[0]
      expect(args.sender).to.be.equal(sender)
      expect(args.executor).to.be.equal(contractAddress)
      expect(args.gasLimit.toString()).to.be.equal(gasLimit)
      expect(args.dataType).to.be.equal(dataType)
      expect(args.gasPrice.toString()).to.be.equal(gasPrice)
      expect(args.data).to.be.equal(data)
    })

    it('unpack dataType 0x02', async () => {
      // given
      const sender = '0xe0241f385c58c88911531ddfe3b5f0fc729bdaee'
      const contractAddress = '0xf4bef13f9f4f2b203faf0c3cbbaabe1afe056955'
      const txHash = '0xbdceda9d8c94838aca10c687da1411a07b1390e88239c0638cb9cc264219cc10'
      const gasLimit = '1535604485'
      const gasPrice = '0'
      const dataType = '0x02'
      const data = '0xb1591967aed668a4b27645ff40c444892d91bf5951b382995d4d4f6ee3a2ce03'
      // event message generated by
      // requireToPassMessage(address _contract, bytes _data, uint256 _gas, bytes1 _oracleGasPriceSpeed)
      const eventMessage = "0xe0241f385c58c88911531ddfe3b5f0fc729bdaee" + // sender
        "f4bef13f9f4f2b203faf0c3cbbaabe1afe056955" + // contractAddress
        "000000000000000000000000000000000000000000000000000000005b877705" + // gasLimit
        "02" + // dataType
        "10b1591967aed668a4b27645ff40c444892d91bf5951b382995d4d4f6ee3a2ce03" // data

      // validator needs to add txHash into message
      const message = eventMessage.slice(0, 82) + txHash.replace(/^0x/, '') + eventMessage.slice(82)

      // when
      const messageTest = await MessageTest.new()
      const { logs } = await messageTest.unpackData(message)

      // then
      expect(logs.length).to.be.equal(1)
      const { args } = logs[0]
      expect(args.sender).to.be.equal(sender)
      expect(args.executor).to.be.equal(contractAddress)
      expect(args.gasLimit.toString()).to.be.equal(gasLimit)
      expect(args.dataType).to.be.equal(dataType)
      expect(args.gasPrice.toString()).to.be.equal(gasPrice)
      expect(args.data).to.be.equal(data)
    })
  })
})
